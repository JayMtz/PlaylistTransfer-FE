{"ast":null,"code":"var _jsxFileName = \"/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { appleButton, spotifyButton } from './styles';\n//import SpotifyWebApi from 'spotify-web-api-js';\nimport { getSpotifyTokenFromUrl, getLikedSongs, handleSpotifyAuth } from './spotifyApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isSpotifyLoggedIn, setIsSpotifyLoggedIn] = useState(false);\n  const [spotifyToken, setSpotifyToken] = useState(null);\n  const [likedSongs, setLikedSongs] = useState([]);\n\n  // This useEffect hook checks for the Spotify token in the URL when the app first loads.\n  // If the token is present, it sets the token state and sets the isSpotifyLoggedIn state to true.\n  useEffect(() => {\n    const token = getSpotifyTokenFromUrl();\n    if (token) {\n      setSpotifyToken(token);\n      setIsSpotifyLoggedIn(true);\n      console.log(token);\n    }\n  }, []);\n\n  // This function is called when the \"Get Liked Songs\" button is clicked.\n  // It calls the getLikedSongs function with the Spotify token to retrieve the user's liked songs.\n  const handleGetLikedSongs = () => {\n    getLikedSongs(spotifyToken);\n    getLikedSongs(setLikedSongs);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: likedSongs.length === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAuthAndLoadSongs,\n      children: \"Load my liked songs from Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"My Liked Songs:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: likedSongs.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [song.name, \" - \", song.artist]\n        }, `${song.name}-${song.artist}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dxfb4DTghu8E1eaJysxPzw2LE40=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","appleButton","spotifyButton","getSpotifyTokenFromUrl","getLikedSongs","handleSpotifyAuth","jsxDEV","_jsxDEV","App","_s","isSpotifyLoggedIn","setIsSpotifyLoggedIn","spotifyToken","setSpotifyToken","likedSongs","setLikedSongs","token","console","log","handleGetLikedSongs","children","length","onClick","handleAuthAndLoadSongs","fileName","_jsxFileName","lineNumber","columnNumber","map","song","name","artist","_c","$RefreshReg$"],"sources":["/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { appleButton, spotifyButton } from './styles';\n//import SpotifyWebApi from 'spotify-web-api-js';\nimport { getSpotifyTokenFromUrl, getLikedSongs, handleSpotifyAuth } from './spotifyApi';\n\nfunction App() {\n  const [isSpotifyLoggedIn, setIsSpotifyLoggedIn] = useState(false);\n  const [spotifyToken, setSpotifyToken] = useState(null)\n\n  const [likedSongs, setLikedSongs] = useState([]);\n\n  // This useEffect hook checks for the Spotify token in the URL when the app first loads.\n  // If the token is present, it sets the token state and sets the isSpotifyLoggedIn state to true.\n  useEffect(() => {\n    const token = getSpotifyTokenFromUrl();\n    if (token) {\n      setSpotifyToken(token);\n      setIsSpotifyLoggedIn(true);\n      console.log(token);\n    }\n  }, []);\n\n  // This function is called when the \"Get Liked Songs\" button is clicked.\n  // It calls the getLikedSongs function with the Spotify token to retrieve the user's liked songs.\n  const handleGetLikedSongs = () => {\n    getLikedSongs(spotifyToken);\n    getLikedSongs(setLikedSongs);\n  };\n  \n\n  \n  return (\n    <div>\n      {likedSongs.length === 0 ? (\n        <button onClick={handleAuthAndLoadSongs}>Load my liked songs from Spotify</button>\n      ) : (\n        <div>\n          <h1>My Liked Songs:</h1>\n          <ul>\n            {likedSongs.map((song) => (\n              <li key={`${song.name}-${song.artist}`}>\n                {song.name} - {song.artist}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n\n    \n  )\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,aAAa,QAAQ,UAAU;AACrD;AACA,SAASC,sBAAsB,EAAEC,aAAa,EAAEC,iBAAiB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExF,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA;EACAD,SAAS,CAAC,MAAM;IACd,MAAMiB,KAAK,GAAGb,sBAAsB,EAAE;IACtC,IAAIa,KAAK,EAAE;MACTH,eAAe,CAACG,KAAK,CAAC;MACtBL,oBAAoB,CAAC,IAAI,CAAC;MAC1BM,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,MAAMG,mBAAmB,GAAGA,CAAA,KAAM;IAChCf,aAAa,CAACQ,YAAY,CAAC;IAC3BR,aAAa,CAACW,aAAa,CAAC;EAC9B,CAAC;EAID,oBACER,OAAA;IAAAa,QAAA,EACGN,UAAU,CAACO,MAAM,KAAK,CAAC,gBACtBd,OAAA;MAAQe,OAAO,EAAEC,sBAAuB;MAAAH,QAAA,EAAC;IAAgC;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,gBAElFpB,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,EAAI;MAAe;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACxBpB,OAAA;QAAAa,QAAA,EACGN,UAAU,CAACc,GAAG,CAAEC,IAAI,iBACnBtB,OAAA;UAAAa,QAAA,GACGS,IAAI,CAACC,IAAI,EAAC,KAAG,EAACD,IAAI,CAACE,MAAM;QAAA,GADlB,GAAEF,IAAI,CAACC,IAAK,IAAGD,IAAI,CAACE,MAAO,EAAC;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAGvC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAER;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAIV;AAAClB,EAAA,CA9CQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA8CX;AAED,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}