{"ast":null,"code":"// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, client ID, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const clientId = '8f294d8899f94e34b7690db17fe12fc9';\n  const scopes = ['user-library-read'];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n};\n\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n\n  // function to get all of the user's liked tracks\n  const getAllTracks = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const response = await spotifyApi.getMySavedTracks({\n      offset\n    });\n    // map the response to an array of objects containing the track name and artist name\n    const tracks = response.items.map(item => ({\n      name: item.track.name,\n      artist: item.track.artists[0].name\n    }));\n\n    // check if there are more tracks to get\n    if (response.next) {\n      // recursively get the next page of tracks\n      const nextTracks = await getAllTracks(offset + response.limit);\n      // concatenate the current page of tracks with the next page of tracks\n      return [...tracks, ...nextTracks];\n    }\n    return tracks;\n  };\n\n  // call the getAllTracks function and log the tracks to the console\n  getAllTracks().then(tracks => {\n    setLikedSongs(tracks);\n    // do something with the songs\n  }).catch(error => console.log(error));\n};","map":{"version":3,"names":["SpotifyWebApi","spotifyApi","handleSpotifyAuth","authEndpoint","clientId","scopes","redirectUri","authUrl","join","window","location","getSpotifyTokenFromUrl","hash","token","substring","split","getLikedSongs","setAccessToken","getAllTracks","offset","arguments","length","undefined","response","getMySavedTracks","tracks","items","map","item","name","track","artist","artists","next","nextTracks","limit","then","setLikedSongs","catch","error","console","log"],"sources":["/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/spotifyApi.js"],"sourcesContent":["// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, client ID, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const clientId = '8f294d8899f94e34b7690db17fe12fc9';\n  const scopes = ['user-library-read'];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n};\n\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  \n  // function to get all of the user's liked tracks\n  const getAllTracks = async (offset = 0) => {\n    const response = await spotifyApi.getMySavedTracks({ offset });\n    // map the response to an array of objects containing the track name and artist name\n    const tracks = response.items.map((item) => ({\n      name: item.track.name,\n      artist: item.track.artists[0].name,\n    }));\n    \n    // check if there are more tracks to get\n    if (response.next) {\n      // recursively get the next page of tracks\n      const nextTracks = await getAllTracks(offset + response.limit);\n      // concatenate the current page of tracks with the next page of tracks\n      return [...tracks, ...nextTracks];\n    }\n  \n    return tracks;\n  };\n  \n  // call the getAllTracks function and log the tracks to the console\n  getAllTracks()\n    .then((tracks) => {\n      setLikedSongs(tracks)\n      // do something with the songs\n    })\n    .catch((error) => console.log(error));\n};\n"],"mappings":"AAAA;AACA,OAAOA,aAAa,MAAM,oBAAoB;AAC9C,MAAMC,UAAU,GAAG,IAAID,aAAa,EAAE;;AAEtC;AACA,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAM;EACrC;EACA,MAAMC,YAAY,GAAG,wCAAwC;EAC7D,MAAMC,QAAQ,GAAG,kCAAkC;EACnD,MAAMC,MAAM,GAAG,CAAC,mBAAmB,CAAC;EACpC,MAAMC,WAAW,GAAG,iCAAiC;EACrD,MAAMC,OAAO,GAAI,GAAEJ,YAAa,cAAaC,QAAS,iBAAgBE,WAAY,UAASD,MAAM,CAACG,IAAI,CAAC,KAAK,CAAE,uCAAsC;EACpJ;EACAC,MAAM,CAACC,QAAQ,GAAGH,OAAO;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMI,sBAAsB,GAAGA,CAAA,KAAM;EAC1C,MAAMC,IAAI,GAAGH,MAAM,CAACC,QAAQ,CAACE,IAAI;EACjC,MAAMC,KAAK,GAAGD,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAOF,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAIH,KAAK,IAAK;EACtC;EACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;;EAEhC;EACA,MAAMK,YAAY,GAAG,eAAAA,CAAA,EAAsB;IAAA,IAAfC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IACpC,MAAMG,QAAQ,GAAG,MAAMtB,UAAU,CAACuB,gBAAgB,CAAC;MAAEL;IAAO,CAAC,CAAC;IAC9D;IACA,MAAMM,MAAM,GAAGF,QAAQ,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,KAAM;MAC3CC,IAAI,EAAED,IAAI,CAACE,KAAK,CAACD,IAAI;MACrBE,MAAM,EAAEH,IAAI,CAACE,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAACH;IAChC,CAAC,CAAC,CAAC;;IAEH;IACA,IAAIN,QAAQ,CAACU,IAAI,EAAE;MACjB;MACA,MAAMC,UAAU,GAAG,MAAMhB,YAAY,CAACC,MAAM,GAAGI,QAAQ,CAACY,KAAK,CAAC;MAC9D;MACA,OAAO,CAAC,GAAGV,MAAM,EAAE,GAAGS,UAAU,CAAC;IACnC;IAEA,OAAOT,MAAM;EACf,CAAC;;EAED;EACAP,YAAY,EAAE,CACXkB,IAAI,CAAEX,MAAM,IAAK;IAChBY,aAAa,CAACZ,MAAM,CAAC;IACrB;EACF,CAAC,CAAC,CACDa,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}