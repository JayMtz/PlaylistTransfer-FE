{"ast":null,"code":"// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, client ID, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const clientId = '8f294d8899f94e34b7690db17fe12fc9';\n  const scopes = ['user-library-read'];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n};\n\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n\n  // function to get all of the user's liked tracks\n  async function getAllTracks() {\n    const accessToken = await getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    const response = await fetch('https://api.spotify.com/v1/me/tracks?limit=50', {\n      headers\n    });\n    const data = await response.json();\n\n    // Send data to backend endpoint\n    await fetch('https://example.com/backend/endpoint', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return data;\n  }\n\n  // call the getAllTracks function and log the tracks to the console\n  getAllTracks().then(tracks => {\n    console.log(tracks);\n    return getAllTracks();\n  }).catch(error => console.log(error));\n};","map":{"version":3,"names":["SpotifyWebApi","spotifyApi","handleSpotifyAuth","authEndpoint","clientId","scopes","redirectUri","authUrl","join","window","location","getSpotifyTokenFromUrl","hash","token","substring","split","getLikedSongs","setAccessToken","getAllTracks","accessToken","getAccessToken","headers","Authorization","response","fetch","data","json","method","body","JSON","stringify","then","tracks","console","log","catch","error"],"sources":["/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/spotifyApi.js"],"sourcesContent":["// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, client ID, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const clientId = '8f294d8899f94e34b7690db17fe12fc9';\n  const scopes = ['user-library-read'];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n};\n\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  \n  // function to get all of the user's liked tracks\n  async function getAllTracks() {\n    const accessToken = await getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n  \n    const response = await fetch('https://api.spotify.com/v1/me/tracks?limit=50', { headers });\n    const data = await response.json();\n  \n    // Send data to backend endpoint\n    await fetch('https://example.com/backend/endpoint', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n  \n    return data;\n  }\n  \n  // call the getAllTracks function and log the tracks to the console\n  getAllTracks()\n    .then((tracks) => {\n      console.log(tracks);\n      return getAllTracks()\n    })\n    .catch((error) => console.log(error));\n};\n"],"mappings":"AAAA;AACA,OAAOA,aAAa,MAAM,oBAAoB;AAC9C,MAAMC,UAAU,GAAG,IAAID,aAAa,EAAE;;AAEtC;AACA,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAM;EACrC;EACA,MAAMC,YAAY,GAAG,wCAAwC;EAC7D,MAAMC,QAAQ,GAAG,kCAAkC;EACnD,MAAMC,MAAM,GAAG,CAAC,mBAAmB,CAAC;EACpC,MAAMC,WAAW,GAAG,iCAAiC;EACrD,MAAMC,OAAO,GAAI,GAAEJ,YAAa,cAAaC,QAAS,iBAAgBE,WAAY,UAASD,MAAM,CAACG,IAAI,CAAC,KAAK,CAAE,uCAAsC;EACpJ;EACAC,MAAM,CAACC,QAAQ,GAAGH,OAAO;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMI,sBAAsB,GAAGA,CAAA,KAAM;EAC1C,MAAMC,IAAI,GAAGH,MAAM,CAACC,QAAQ,CAACE,IAAI;EACjC,MAAMC,KAAK,GAAGD,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAOF,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAIH,KAAK,IAAK;EACtC;EACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;;EAEhC;EACA,eAAeK,YAAYA,CAAA,EAAG;IAC5B,MAAMC,WAAW,GAAG,MAAMC,cAAc,EAAE;IAC1C,MAAMC,OAAO,GAAG;MACdC,aAAa,EAAG,UAASH,WAAY;IACvC,CAAC;IAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;MAAEH;IAAQ,CAAC,CAAC;IAC1F,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;;IAElC;IACA,MAAMF,KAAK,CAAC,sCAAsC,EAAE;MAClDG,MAAM,EAAE,MAAM;MACdN,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC3B,CAAC,CAAC;IAEF,OAAOA,IAAI;EACb;;EAEA;EACAP,YAAY,EAAE,CACXa,IAAI,CAAEC,MAAM,IAAK;IAChBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,OAAOd,YAAY,EAAE;EACvB,CAAC,CAAC,CACDiB,KAAK,CAAEC,KAAK,IAAKH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC,CAAC;AACzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}