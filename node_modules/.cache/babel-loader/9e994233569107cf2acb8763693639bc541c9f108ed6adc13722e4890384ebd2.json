{"ast":null,"code":"// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, client ID, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const clientId = '8f294d8899f94e34b7690db17fe12fc9';\n  const scopes = ['user-library-read', 'playlist-modify-public', 'playlist-modify-private'];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n};\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  userid = getUserId(token);\n\n  // function to get all of the user's liked tracks\n  const getAllTracks = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const response = await spotifyApi.getMySavedTracks({\n      offset\n    });\n    // map the response to an array of objects containing the track name and artist name\n    const tracks = response.items.map(item => ({\n      name: item.track.name,\n      artist: item.track.artists[0].name,\n      userid: item.track.userid\n    }));\n\n    // check if there are more tracks to get\n    if (response.next) {\n      // recursively get the next page of tracks\n      const nextTracks = await getAllTracks(offset + response.limit);\n      // concatenate the current page of tracks with the next page of tracks\n      return [...tracks, ...nextTracks];\n    }\n    return tracks;\n  };\n\n  // return the Promise from getAllTracks\n  return getAllTracks().then(tracks => {\n    console.log(tracks); // log the tracks to the console for debugging purposes\n    // send the tracks to the backend endpoint using fetch\n    fetch('http://localhost:4000/tracks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tracks)\n    }).then(response => {\n      console.log('Data sent successfully:', response);\n      return response.json();\n    }).then(data => {\n      console.log('Data received:', data); // <-- Log the response data to the console\n    }).catch(error => {\n      console.error('Error sending data:', error);\n    });\n  }).catch(error => console.log(error));\n};\n\n// function to create a new playlist\nexport const createPlaylist = async token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const {\n      id\n    } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n\n    // create the new playlist with the name \"testplaylist\" and set it to be private\n    const response = await spotifyApi.createPlaylist(id, {\n      name: 'Apple Music songs',\n      public: false\n    });\n    console.log('Playlist created:', response);\n  } catch (error) {\n    console.log('Error creating playlist:', error);\n  }\n};\nexport const getUserId = async token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const {\n      id\n    } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n    return id;\n  } catch (error) {\n    console.log('Error getting user ID:', error);\n  }\n};","map":{"version":3,"names":["SpotifyWebApi","spotifyApi","handleSpotifyAuth","authEndpoint","clientId","scopes","redirectUri","authUrl","join","window","location","getSpotifyTokenFromUrl","hash","token","substring","split","getLikedSongs","setAccessToken","userid","getUserId","getAllTracks","offset","arguments","length","undefined","response","getMySavedTracks","tracks","items","map","item","name","track","artist","artists","next","nextTracks","limit","then","console","log","fetch","method","headers","body","JSON","stringify","json","data","catch","error","createPlaylist","id","getMe","public"],"sources":["/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/spotifyApi.js"],"sourcesContent":["// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, client ID, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const clientId = '8f294d8899f94e34b7690db17fe12fc9';\n  const scopes = ['user-library-read', 'playlist-modify-public', 'playlist-modify-private'];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n}\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  userid = getUserId(token);\n\n  // function to get all of the user's liked tracks\n  const getAllTracks = async (offset = 0) => {\n    const response = await spotifyApi.getMySavedTracks({ offset });\n    // map the response to an array of objects containing the track name and artist name\n    const tracks = response.items.map((item) => ({\n      name: item.track.name,\n      artist: item.track.artists[0].name,\n      userid: item.track.userid\n    }));\n\n    // check if there are more tracks to get\n    if (response.next) {\n      // recursively get the next page of tracks\n      const nextTracks = await getAllTracks(offset + response.limit);\n      // concatenate the current page of tracks with the next page of tracks\n      return [...tracks, ...nextTracks];\n    }\n\n    return tracks;\n  };\n\n  // return the Promise from getAllTracks\n  return getAllTracks()\n    .then((tracks) => {\n      console.log(tracks); // log the tracks to the console for debugging purposes\n      // send the tracks to the backend endpoint using fetch\n      fetch('http://localhost:4000/tracks', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(tracks),\n})\n  .then((response) => {\n    console.log('Data sent successfully:', response);\n    return response.json();\n  })\n  .then((data) => {\n    console.log('Data received:', data); // <-- Log the response data to the console\n  })\n  .catch((error) => {\n    console.error('Error sending data:', error);\n  });\n\n    })\n    .catch((error) => console.log(error));\n};\n\n\n\n// function to create a new playlist\nexport const createPlaylist = async (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const { id } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n    \n    // create the new playlist with the name \"testplaylist\" and set it to be private\n    const response = await spotifyApi.createPlaylist(id, {\n      name: 'Apple Music songs',\n      public: false\n    });\n    console.log('Playlist created:', response);\n  } catch (error) {\n    console.log('Error creating playlist:', error);\n  }\n};\n\n\nexport const getUserId = async (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const { id } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n    return id;\n  } catch (error) {\n    console.log('Error getting user ID:', error);\n  }\n};\n\n\n\n"],"mappings":"AAAA;AACA,OAAOA,aAAa,MAAM,oBAAoB;AAC9C,MAAMC,UAAU,GAAG,IAAID,aAAa,EAAE;;AAEtC;AACA,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAM;EACrC;EACA,MAAMC,YAAY,GAAG,wCAAwC;EAC7D,MAAMC,QAAQ,GAAG,kCAAkC;EACnD,MAAMC,MAAM,GAAG,CAAC,mBAAmB,EAAE,wBAAwB,EAAE,yBAAyB,CAAC;EACzF,MAAMC,WAAW,GAAG,iCAAiC;EACrD,MAAMC,OAAO,GAAI,GAAEJ,YAAa,cAAaC,QAAS,iBAAgBE,WAAY,UAASD,MAAM,CAACG,IAAI,CAAC,KAAK,CAAE,uCAAsC;EACpJ;EACAC,MAAM,CAACC,QAAQ,GAAGH,OAAO;AAC3B,CAAC;AACD;AACA,OAAO,MAAMI,sBAAsB,GAAGA,CAAA,KAAM;EAC1C,MAAMC,IAAI,GAAGH,MAAM,CAACC,QAAQ,CAACE,IAAI;EACjC,MAAMC,KAAK,GAAGD,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAOF,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAIH,KAAK,IAAK;EACtC;EACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;EAChCK,MAAM,GAAGC,SAAS,CAACN,KAAK,CAAC;;EAEzB;EACA,MAAMO,YAAY,GAAG,eAAAA,CAAA,EAAsB;IAAA,IAAfC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IACpC,MAAMG,QAAQ,GAAG,MAAMxB,UAAU,CAACyB,gBAAgB,CAAC;MAAEL;IAAO,CAAC,CAAC;IAC9D;IACA,MAAMM,MAAM,GAAGF,QAAQ,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,KAAM;MAC3CC,IAAI,EAAED,IAAI,CAACE,KAAK,CAACD,IAAI;MACrBE,MAAM,EAAEH,IAAI,CAACE,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAACH,IAAI;MAClCb,MAAM,EAAEY,IAAI,CAACE,KAAK,CAACd;IACrB,CAAC,CAAC,CAAC;;IAEH;IACA,IAAIO,QAAQ,CAACU,IAAI,EAAE;MACjB;MACA,MAAMC,UAAU,GAAG,MAAMhB,YAAY,CAACC,MAAM,GAAGI,QAAQ,CAACY,KAAK,CAAC;MAC9D;MACA,OAAO,CAAC,GAAGV,MAAM,EAAE,GAAGS,UAAU,CAAC;IACnC;IAEA,OAAOT,MAAM;EACf,CAAC;;EAED;EACA,OAAOP,YAAY,EAAE,CAClBkB,IAAI,CAAEX,MAAM,IAAK;IAChBY,OAAO,CAACC,GAAG,CAACb,MAAM,CAAC,CAAC,CAAC;IACrB;IACAc,KAAK,CAAC,8BAA8B,EAAE;MAC1CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,MAAM;IAC7B,CAAC,CAAC,CACCW,IAAI,CAAEb,QAAQ,IAAK;MAClBc,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEf,QAAQ,CAAC;MAChD,OAAOA,QAAQ,CAACsB,IAAI,EAAE;IACxB,CAAC,CAAC,CACDT,IAAI,CAAEU,IAAI,IAAK;MACdT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEQ,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBX,OAAO,CAACW,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EAEA,CAAC,CAAC,CACDD,KAAK,CAAEC,KAAK,IAAKX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC,CAAC;AACzC,CAAC;;AAID;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOtC,KAAK,IAAK;EAC7C;EACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;EAChC,IAAI;IACF;IACA,MAAM;MAAEuC;IAAG,CAAC,GAAG,MAAMnD,UAAU,CAACoD,KAAK,EAAE;IACvCd,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEY,EAAE,CAAC;;IAE3B;IACA,MAAM3B,QAAQ,GAAG,MAAMxB,UAAU,CAACkD,cAAc,CAACC,EAAE,EAAE;MACnDrB,IAAI,EAAE,mBAAmB;MACzBuB,MAAM,EAAE;IACV,CAAC,CAAC;IACFf,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEf,QAAQ,CAAC;EAC5C,CAAC,CAAC,OAAOyB,KAAK,EAAE;IACdX,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEU,KAAK,CAAC;EAChD;AACF,CAAC;AAGD,OAAO,MAAM/B,SAAS,GAAG,MAAON,KAAK,IAAK;EACxC;EACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;EAChC,IAAI;IACF;IACA,MAAM;MAAEuC;IAAG,CAAC,GAAG,MAAMnD,UAAU,CAACoD,KAAK,EAAE;IACvCd,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEY,EAAE,CAAC;IAC3B,OAAOA,EAAE;EACX,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdX,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEU,KAAK,CAAC;EAC9C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}