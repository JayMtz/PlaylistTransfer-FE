{"ast":null,"code":"var _jsxFileName = \"/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { appleButton, spotifyButton } from './styles';\nimport { getSpotifyTokenFromUrl, getLikedSongs, handleSpotifyAuth, createPlaylist } from './spotifyApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isSpotifyLoggedIn, setIsSpotifyLoggedIn] = useState(false);\n  const [spotifyToken, setSpotifyToken] = useState(null);\n  const [tracks, setTracks] = useState([]);\n\n  // This useEffect hook checks for the Spotify token in the URL when the app first loads.\n  // If the token is present, it sets the token state and sets the isSpotifyLoggedIn state to true.\n  useEffect(() => {\n    const token = getSpotifyTokenFromUrl();\n    if (token) {\n      setSpotifyToken(token);\n      setIsSpotifyLoggedIn(true);\n      console.log(token);\n    }\n  }, []);\n\n  // This function is called when the \"Get Liked Songs\" button is clicked.\n  // It calls the getLikedSongs function with the Spotify token to retrieve the user's liked songs.\n  const handleGetLikedSongs = () => {\n    getLikedSongs(spotifyToken);\n  };\n  const handleCreatePlaylist = () => {\n    createPlaylist(spotifyToken, \"testplaylist\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100vh',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: spotifyButton,\n        onClick: handleSpotifyAuth,\n        children: \"Click here to Authorize your Spotify account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), isSpotifyLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          bottom: '0',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: spotifyButton,\n          onClick: handleGetLikedSongs,\n          children: \"get liked songs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: spotifyButton,\n          onClick: createPlaylist,\n          children: \"Create a playlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uZmuojFJkG5PIDmV9iZkkctPdnM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","appleButton","spotifyButton","getSpotifyTokenFromUrl","getLikedSongs","handleSpotifyAuth","createPlaylist","jsxDEV","_jsxDEV","App","_s","isSpotifyLoggedIn","setIsSpotifyLoggedIn","spotifyToken","setSpotifyToken","tracks","setTracks","token","console","log","handleGetLikedSongs","handleCreatePlaylist","className","children","style","display","flexDirection","height","justifyContent","alignItems","onClick","fileName","_jsxFileName","lineNumber","columnNumber","position","bottom","width","_c","$RefreshReg$"],"sources":["/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { appleButton, spotifyButton } from './styles';\nimport { getSpotifyTokenFromUrl, getLikedSongs, handleSpotifyAuth, createPlaylist } from './spotifyApi';\n\nfunction App() {\n  const [isSpotifyLoggedIn, setIsSpotifyLoggedIn] = useState(false);\n  const [spotifyToken, setSpotifyToken] = useState(null);\n\n  const [tracks, setTracks] = useState([]);\n\n  // This useEffect hook checks for the Spotify token in the URL when the app first loads.\n  // If the token is present, it sets the token state and sets the isSpotifyLoggedIn state to true.\n  useEffect(() => {\n    const token = getSpotifyTokenFromUrl();\n    if (token) {\n      setSpotifyToken(token);\n      setIsSpotifyLoggedIn(true);\n      console.log(token);\n    }\n  }, []);\n\n  // This function is called when the \"Get Liked Songs\" button is clicked.\n  // It calls the getLikedSongs function with the Spotify token to retrieve the user's liked songs.\n  const handleGetLikedSongs = () => {\n    getLikedSongs(spotifyToken);\n  };\n\n\n  const handleCreatePlaylist = () => {\n    createPlaylist(spotifyToken, \"testplaylist\");\n  };\n\n  return (\n    <div className='App'>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100vh',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <button style={spotifyButton} onClick={handleSpotifyAuth}>\n          Click here to Authorize your Spotify account\n        </button>\n        {isSpotifyLoggedIn && (\n          <div style={{ position: 'absolute', bottom: '0', width: '100%' }}>\n            <button style={spotifyButton} onClick={handleGetLikedSongs}>\n              get liked songs\n            </button>\n            <button style={spotifyButton} onClick = {createPlaylist} >\n              Create a playlist\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,aAAa,QAAQ,UAAU;AACrD,SAASC,sBAAsB,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,cAAc,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExG,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA;EACAD,SAAS,CAAC,MAAM;IACd,MAAMkB,KAAK,GAAGd,sBAAsB,EAAE;IACtC,IAAIc,KAAK,EAAE;MACTH,eAAe,CAACG,KAAK,CAAC;MACtBL,oBAAoB,CAAC,IAAI,CAAC;MAC1BM,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,MAAMG,mBAAmB,GAAGA,CAAA,KAAM;IAChChB,aAAa,CAACS,YAAY,CAAC;EAC7B,CAAC;EAGD,MAAMQ,oBAAoB,GAAGA,CAAA,KAAM;IACjCf,cAAc,CAACO,YAAY,EAAE,cAAc,CAAC;EAC9C,CAAC;EAED,oBACEL,OAAA;IAAKc,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBf,OAAA;MACEgB,KAAK,EAAE;QACLC,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBC,MAAM,EAAE,OAAO;QACfC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE;MACd,CAAE;MAAAN,QAAA,gBAEFf,OAAA;QAAQgB,KAAK,EAAEtB,aAAc;QAAC4B,OAAO,EAAEzB,iBAAkB;QAAAkB,QAAA,EAAC;MAE1D;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,EACRvB,iBAAiB,iBAChBH,OAAA;QAAKgB,KAAK,EAAE;UAAEW,QAAQ,EAAE,UAAU;UAAEC,MAAM,EAAE,GAAG;UAAEC,KAAK,EAAE;QAAO,CAAE;QAAAd,QAAA,gBAC/Df,OAAA;UAAQgB,KAAK,EAAEtB,aAAc;UAAC4B,OAAO,EAAEV,mBAAoB;UAAAG,QAAA,EAAC;QAE5D;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eACT1B,OAAA;UAAQgB,KAAK,EAAEtB,aAAc;UAAC4B,OAAO,EAAIxB,cAAe;UAAAiB,QAAA,EAAE;QAE1D;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAEZ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAACxB,EAAA,CAvDQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAyDZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}