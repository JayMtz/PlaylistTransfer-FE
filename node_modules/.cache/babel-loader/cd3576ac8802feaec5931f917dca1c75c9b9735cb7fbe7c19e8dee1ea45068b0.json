{"ast":null,"code":"// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, client ID, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const clientId = '8f294d8899f94e34b7690db17fe12fc9';\n  const scopes = ['user-library-read', 'playlist-modify-public', 'playlist-modify-private', 'user-read-private', 'user-read-email'];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n};\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = async token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const userId = await getUserId(token);\n\n    // function to get all of the user's liked tracks\n    const getAllTracks = async function () {\n      let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      const response = await spotifyApi.getMySavedTracks({\n        offset\n      });\n      // map the response to an array of objects containing the track name, artist name, and user ID\n      const tracks = response.items.map(item => ({\n        name: item.track.name,\n        artist: item.track.artists[0].name,\n        userId: userId\n      }));\n\n      // check if there are more tracks to get\n      if (response.next) {\n        // recursively get the next page of tracks\n        const nextTracks = await getAllTracks(offset + response.limit);\n        // concatenate the current page of tracks with the next page of tracks\n        return [...tracks, ...nextTracks];\n      }\n      return tracks;\n    };\n\n    // get all of the user's liked tracks\n    const tracks = await getAllTracks();\n    console.log(tracks); // log the tracks to the console for debugging purposes\n\n    // send the tracks to the backend endpoint using fetch\n    const response = await fetch('http://localhost:4000/saveSongs', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tracks)\n    });\n    console.log('Data sent successfully:', response);\n    const data = await response.json();\n    console.log('Data received:', data); // <-- Log the response data to the console\n\n    return data;\n  } catch (error) {\n    console.error('Error getting liked songs:', error);\n    throw error;\n  }\n};\n\n// function to create a new playlist\nexport const createPlaylist = async token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const {\n      id\n    } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n\n    // create the new playlist with the name \"testplaylist\" and set it to be private\n    const response = await spotifyApi.createPlaylist(id, {\n      name: 'Apple Music Songs',\n      public: false\n    });\n    console.log('Playlist created:', response);\n  } catch (error) {\n    console.log('Error creating playlist:', error);\n  }\n};\nexport const getUserId = async token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const {\n      id\n    } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n    return id;\n  } catch (error) {\n    console.log('Error creating User ID:', error);\n  }\n};\n\n// Function to fetch songs from backend API\nexport const getDbSongs = async token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n\n    const userId = await getUserId(token);\n    const response = await fetch(`http://localhost:4000/getDbSongs/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // <-- Include the Spotify token in the headers\n      }\n    });\n\n    const data = await response.json();\n    console.log('Data received getDbSongs', data); // <-- Log the response data to the console\n\n    return data;\n  } catch (error) {\n    console.error('Error getting songs from the database:', error);\n    throw error;\n  }\n};\n\n// Function to upload songs to Spotify\nexport const uploadSongs = async token => {\n  try {\n    // get songs from the backend API\n    const data = await getDbSongs(token);\n\n    // set the access token for the SpotifyWebApi instance\n    spotifyApi.setAccessToken(token);\n\n    // get the user ID\n    const userId = await getUserId(token);\n\n    // get the playlist ID for the \"Apple Music Songs\" playlist\n    const playlists = await spotifyApi.getUserPlaylists(userId);\n    console.log(playlists);\n    const appleMusicPlaylist = playlists.items.find(playlist => playlist.name === 'Apple Music Songs');\n    if (!appleMusicPlaylist) {\n      console.log(appleMusicPlaylist);\n      console.log('Playlist not found');\n      return;\n    }\n    const playlistId = appleMusicPlaylist.id;\n\n    // create an array of track URIs from the response data\n    const trackUris = await Promise.all(data.map(async song => {\n      const track = await spotifyApi.searchTracks(`${song.artist} ${song.name}`);\n      return track.tracks.items[0].uri;\n    }));\n\n    // add the tracks to the \"Apple Music Songs\" playlist\n    const response = await spotifyApi.addTracksToPlaylist(playlistId, trackUris);\n    console.log('Tracks added to playlist:', response);\n  } catch (error) {\n    console.log('Error adding tracks to playlist:', error);\n  }\n};","map":{"version":3,"names":["SpotifyWebApi","spotifyApi","handleSpotifyAuth","authEndpoint","clientId","scopes","redirectUri","authUrl","join","window","location","getSpotifyTokenFromUrl","hash","token","substring","split","getLikedSongs","setAccessToken","userId","getUserId","getAllTracks","offset","arguments","length","undefined","response","getMySavedTracks","tracks","items","map","item","name","track","artist","artists","next","nextTracks","limit","console","log","fetch","method","headers","body","JSON","stringify","data","json","error","createPlaylist","id","getMe","public","getDbSongs","uploadSongs","playlists","getUserPlaylists","appleMusicPlaylist","find","playlist","playlistId","trackUris","Promise","all","song","searchTracks","uri","addTracksToPlaylist"],"sources":["/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/spotifyApi.js"],"sourcesContent":["// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n\n\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, client ID, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const clientId = '8f294d8899f94e34b7690db17fe12fc9';\n  const scopes = ['user-library-read', 'playlist-modify-public', 'playlist-modify-private','user-read-private', 'user-read-email' ];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n}\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = async (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n\n  try {\n    // get the user ID\n    const userId = await getUserId(token);\n\n    // function to get all of the user's liked tracks\n    const getAllTracks = async (offset = 0) => {\n      const response = await spotifyApi.getMySavedTracks({ offset });\n      // map the response to an array of objects containing the track name, artist name, and user ID\n      const tracks = response.items.map((item) => ({\n        name: item.track.name,\n        artist: item.track.artists[0].name,\n        userId: userId,\n      }));\n\n      // check if there are more tracks to get\n      if (response.next) {\n        // recursively get the next page of tracks\n        const nextTracks = await getAllTracks(offset + response.limit);\n        // concatenate the current page of tracks with the next page of tracks\n        return [...tracks, ...nextTracks];\n      }\n\n      return tracks;\n    };\n\n    // get all of the user's liked tracks\n    const tracks = await getAllTracks();\n\n    console.log(tracks); // log the tracks to the console for debugging purposes\n\n    // send the tracks to the backend endpoint using fetch\n    const response = await fetch('http://localhost:4000/saveSongs', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(tracks),\n    });\n\n    console.log('Data sent successfully:', response);\n\n    const data = await response.json();\n    console.log('Data received:', data); // <-- Log the response data to the console\n\n    return data;\n  } catch (error) {\n    console.error('Error getting liked songs:', error);\n    throw error;\n  }\n};\n\n\n// function to create a new playlist\nexport const createPlaylist = async (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const { id } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n    \n    // create the new playlist with the name \"testplaylist\" and set it to be private\n    const response = await spotifyApi.createPlaylist(id, {\n      name: 'Apple Music Songs',\n      public: false\n    });\n    console.log('Playlist created:', response);\n  } catch (error) {\n    console.log('Error creating playlist:', error);\n  }\n};\n\n\nexport const getUserId = async (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const { id } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n    return id;\n    \n    \n  } catch (error) {\n    console.log('Error creating User ID:', error);\n  }\n  \n};\n\n// Function to fetch songs from backend API\nexport const getDbSongs = async (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n\n  try {\n    // get the user ID\n    \n    const userId = await getUserId(token);\n    \n\n    const response = await fetch(`http://localhost:4000/getDbSongs/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`, // <-- Include the Spotify token in the headers\n      },\n    });\n\n    const data = await response.json();\n    console.log('Data received getDbSongs', data); // <-- Log the response data to the console\n\n    return data;\n  } catch (error) {\n    console.error('Error getting songs from the database:', error);\n    throw error;\n  }\n};\n\n\n// Function to upload songs to Spotify\nexport const uploadSongs = async (token) => {\n  try {\n    // get songs from the backend API\n    const data = await getDbSongs(token);\n\n    // set the access token for the SpotifyWebApi instance\n    spotifyApi.setAccessToken(token);\n\n    // get the user ID\n    const userId = await getUserId(token);\n\n    // get the playlist ID for the \"Apple Music Songs\" playlist\n    const playlists = await spotifyApi.getUserPlaylists(userId);\n   console.log(playlists)\n    const appleMusicPlaylist = playlists.items.find((playlist) => playlist.name === 'Apple Music Songs');\n\n    if (!appleMusicPlaylist) {\n      console.log(appleMusicPlaylist)\n      console.log('Playlist not found');\n      return;\n    }\n\n    const playlistId = appleMusicPlaylist.id;\n\n    // create an array of track URIs from the response data\n    const trackUris = await Promise.all(data.map(async (song) => {\n      const track = await spotifyApi.searchTracks(`${song.artist} ${song.name}`);\n      return track.tracks.items[0].uri;\n    }));\n\n    // add the tracks to the \"Apple Music Songs\" playlist\n    const response = await spotifyApi.addTracksToPlaylist(playlistId, trackUris);\n    console.log('Tracks added to playlist:', response);\n  } catch (error) {\n    console.log('Error adding tracks to playlist:', error);\n  }\n};\n\n\n\n\n\n\n"],"mappings":"AAAA;AACA,OAAOA,aAAa,MAAM,oBAAoB;AAC9C,MAAMC,UAAU,GAAG,IAAID,aAAa,EAAE;;AAItC;AACA,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAM;EACrC;EACA,MAAMC,YAAY,GAAG,wCAAwC;EAC7D,MAAMC,QAAQ,GAAG,kCAAkC;EACnD,MAAMC,MAAM,GAAG,CAAC,mBAAmB,EAAE,wBAAwB,EAAE,yBAAyB,EAAC,mBAAmB,EAAE,iBAAiB,CAAE;EACjI,MAAMC,WAAW,GAAG,iCAAiC;EACrD,MAAMC,OAAO,GAAI,GAAEJ,YAAa,cAAaC,QAAS,iBAAgBE,WAAY,UAASD,MAAM,CAACG,IAAI,CAAC,KAAK,CAAE,uCAAsC;EACpJ;EACAC,MAAM,CAACC,QAAQ,GAAGH,OAAO;AAC3B,CAAC;AACD;AACA,OAAO,MAAMI,sBAAsB,GAAGA,CAAA,KAAM;EAC1C,MAAMC,IAAI,GAAGH,MAAM,CAACC,QAAQ,CAACE,IAAI;EACjC,MAAMC,KAAK,GAAGD,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAOF,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAG,MAAOH,KAAK,IAAK;EAC5C;EACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;EAEhC,IAAI;IACF;IACA,MAAMK,MAAM,GAAG,MAAMC,SAAS,CAACN,KAAK,CAAC;;IAErC;IACA,MAAMO,YAAY,GAAG,eAAAA,CAAA,EAAsB;MAAA,IAAfC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MACpC,MAAMG,QAAQ,GAAG,MAAMxB,UAAU,CAACyB,gBAAgB,CAAC;QAAEL;MAAO,CAAC,CAAC;MAC9D;MACA,MAAMM,MAAM,GAAGF,QAAQ,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,KAAM;QAC3CC,IAAI,EAAED,IAAI,CAACE,KAAK,CAACD,IAAI;QACrBE,MAAM,EAAEH,IAAI,CAACE,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAACH,IAAI;QAClCb,MAAM,EAAEA;MACV,CAAC,CAAC,CAAC;;MAEH;MACA,IAAIO,QAAQ,CAACU,IAAI,EAAE;QACjB;QACA,MAAMC,UAAU,GAAG,MAAMhB,YAAY,CAACC,MAAM,GAAGI,QAAQ,CAACY,KAAK,CAAC;QAC9D;QACA,OAAO,CAAC,GAAGV,MAAM,EAAE,GAAGS,UAAU,CAAC;MACnC;MAEA,OAAOT,MAAM;IACf,CAAC;;IAED;IACA,MAAMA,MAAM,GAAG,MAAMP,YAAY,EAAE;IAEnCkB,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC,CAAC,CAAC;;IAErB;IACA,MAAMF,QAAQ,GAAG,MAAMe,KAAK,CAAC,iCAAiC,EAAE;MAC9DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAClB,MAAM;IAC7B,CAAC,CAAC;IAEFW,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEd,QAAQ,CAAC;IAEhD,MAAMqB,IAAI,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,EAAE;IAClCT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEO,IAAI,CAAC,CAAC,CAAC;;IAErC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAGD;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOpC,KAAK,IAAK;EAC7C;EACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;EAChC,IAAI;IACF;IACA,MAAM;MAAEqC;IAAG,CAAC,GAAG,MAAMjD,UAAU,CAACkD,KAAK,EAAE;IACvCb,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEW,EAAE,CAAC;;IAE3B;IACA,MAAMzB,QAAQ,GAAG,MAAMxB,UAAU,CAACgD,cAAc,CAACC,EAAE,EAAE;MACnDnB,IAAI,EAAE,mBAAmB;MACzBqB,MAAM,EAAE;IACV,CAAC,CAAC;IACFd,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEd,QAAQ,CAAC;EAC5C,CAAC,CAAC,OAAOuB,KAAK,EAAE;IACdV,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAES,KAAK,CAAC;EAChD;AACF,CAAC;AAGD,OAAO,MAAM7B,SAAS,GAAG,MAAON,KAAK,IAAK;EACxC;EACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;EAChC,IAAI;IACF;IACA,MAAM;MAAEqC;IAAG,CAAC,GAAG,MAAMjD,UAAU,CAACkD,KAAK,EAAE;IACvCb,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEW,EAAE,CAAC;IAC3B,OAAOA,EAAE;EAGX,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdV,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAES,KAAK,CAAC;EAC/C;AAEF,CAAC;;AAED;AACA,OAAO,MAAMK,UAAU,GAAG,MAAOxC,KAAK,IAAK;EACzC;EACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;EAEhC,IAAI;IACF;;IAEA,MAAMK,MAAM,GAAG,MAAMC,SAAS,CAACN,KAAK,CAAC;IAGrC,MAAMY,QAAQ,GAAG,MAAMe,KAAK,CAAE,oCAAmCtB,MAAO,EAAC,EAAE;MACzEuB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAAS7B,KAAM,EAAC,CAAE;MACtC;IACF,CAAC,CAAC;;IAEF,MAAMiC,IAAI,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,EAAE;IAClCT,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEO,IAAI,CAAC,CAAC,CAAC;;IAE/C,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF,CAAC;;AAGD;AACA,OAAO,MAAMM,WAAW,GAAG,MAAOzC,KAAK,IAAK;EAC1C,IAAI;IACF;IACA,MAAMiC,IAAI,GAAG,MAAMO,UAAU,CAACxC,KAAK,CAAC;;IAEpC;IACAZ,UAAU,CAACgB,cAAc,CAACJ,KAAK,CAAC;;IAEhC;IACA,MAAMK,MAAM,GAAG,MAAMC,SAAS,CAACN,KAAK,CAAC;;IAErC;IACA,MAAM0C,SAAS,GAAG,MAAMtD,UAAU,CAACuD,gBAAgB,CAACtC,MAAM,CAAC;IAC5DoB,OAAO,CAACC,GAAG,CAACgB,SAAS,CAAC;IACrB,MAAME,kBAAkB,GAAGF,SAAS,CAAC3B,KAAK,CAAC8B,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAAC5B,IAAI,KAAK,mBAAmB,CAAC;IAEpG,IAAI,CAAC0B,kBAAkB,EAAE;MACvBnB,OAAO,CAACC,GAAG,CAACkB,kBAAkB,CAAC;MAC/BnB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC;IACF;IAEA,MAAMqB,UAAU,GAAGH,kBAAkB,CAACP,EAAE;;IAExC;IACA,MAAMW,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACjB,IAAI,CAACjB,GAAG,CAAC,MAAOmC,IAAI,IAAK;MAC3D,MAAMhC,KAAK,GAAG,MAAM/B,UAAU,CAACgE,YAAY,CAAE,GAAED,IAAI,CAAC/B,MAAO,IAAG+B,IAAI,CAACjC,IAAK,EAAC,CAAC;MAC1E,OAAOC,KAAK,CAACL,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAACsC,GAAG;IAClC,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMzC,QAAQ,GAAG,MAAMxB,UAAU,CAACkE,mBAAmB,CAACP,UAAU,EAAEC,SAAS,CAAC;IAC5EvB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEd,QAAQ,CAAC;EACpD,CAAC,CAAC,OAAOuB,KAAK,EAAE;IACdV,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAES,KAAK,CAAC;EACxD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}