{"ast":null,"code":"export const getLikedSongs = token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n\n  // function to get all of the user's liked tracks\n  const getAllTracks = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const response = await spotifyApi.getMySavedTracks({\n      offset\n    });\n    // map the response to an array of objects containing the track name and artist name\n    const tracks = response.items.map(item => ({\n      name: item.track.name,\n      artist: item.track.artists[0].name\n    }));\n\n    // check if there are more tracks to get\n    if (response.next) {\n      // recursively get the next page of tracks\n      const nextTracks = await getAllTracks(offset + response.limit);\n      // concatenate the current page of tracks with the next page of tracks\n      return [...tracks, ...nextTracks];\n    }\n    return tracks;\n  };\n\n  // return the Promise from getAllTracks\n  return getAllTracks().then(tracks => {\n    console.log(tracks); // log the tracks to the console for debugging purposes\n    // send the tracks to the backend endpoint using fetch\n    return fetch('http://localhost:3000/tracks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tracks)\n    }).then(response => {\n      console.log('Data sent successfully:', response);\n    }).catch(error => {\n      console.error('Error sending data:', error);\n    });\n  }).catch(error => console.log(error));\n};","map":{"version":3,"names":["getLikedSongs","token","spotifyApi","setAccessToken","getAllTracks","offset","arguments","length","undefined","response","getMySavedTracks","tracks","items","map","item","name","track","artist","artists","next","nextTracks","limit","then","console","log","fetch","method","headers","body","JSON","stringify","catch","error"],"sources":["/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/spotifyApi.js"],"sourcesContent":["export const getLikedSongs = (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n\n  // function to get all of the user's liked tracks\n  const getAllTracks = async (offset = 0) => {\n    const response = await spotifyApi.getMySavedTracks({ offset });\n    // map the response to an array of objects containing the track name and artist name\n    const tracks = response.items.map((item) => ({\n      name: item.track.name,\n      artist: item.track.artists[0].name,\n    }));\n\n    // check if there are more tracks to get\n    if (response.next) {\n      // recursively get the next page of tracks\n      const nextTracks = await getAllTracks(offset + response.limit);\n      // concatenate the current page of tracks with the next page of tracks\n      return [...tracks, ...nextTracks];\n    }\n\n    return tracks;\n  };\n\n  // return the Promise from getAllTracks\n  return getAllTracks()\n    .then((tracks) => {\n      console.log(tracks); // log the tracks to the console for debugging purposes\n      // send the tracks to the backend endpoint using fetch\n      return fetch('http://localhost:3000/tracks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(tracks),\n      })\n        .then((response) => {\n          console.log('Data sent successfully:', response);\n        })\n        .catch((error) => {\n          console.error('Error sending data:', error);\n        });\n    })\n    .catch((error) => console.log(error));\n};\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAIC,KAAK,IAAK;EACtC;EACAC,UAAU,CAACC,cAAc,CAACF,KAAK,CAAC;;EAEhC;EACA,MAAMG,YAAY,GAAG,eAAAA,CAAA,EAAsB;IAAA,IAAfC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IACpC,MAAMG,QAAQ,GAAG,MAAMP,UAAU,CAACQ,gBAAgB,CAAC;MAAEL;IAAO,CAAC,CAAC;IAC9D;IACA,MAAMM,MAAM,GAAGF,QAAQ,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,KAAM;MAC3CC,IAAI,EAAED,IAAI,CAACE,KAAK,CAACD,IAAI;MACrBE,MAAM,EAAEH,IAAI,CAACE,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAACH;IAChC,CAAC,CAAC,CAAC;;IAEH;IACA,IAAIN,QAAQ,CAACU,IAAI,EAAE;MACjB;MACA,MAAMC,UAAU,GAAG,MAAMhB,YAAY,CAACC,MAAM,GAAGI,QAAQ,CAACY,KAAK,CAAC;MAC9D;MACA,OAAO,CAAC,GAAGV,MAAM,EAAE,GAAGS,UAAU,CAAC;IACnC;IAEA,OAAOT,MAAM;EACf,CAAC;;EAED;EACA,OAAOP,YAAY,EAAE,CAClBkB,IAAI,CAAEX,MAAM,IAAK;IAChBY,OAAO,CAACC,GAAG,CAACb,MAAM,CAAC,CAAC,CAAC;IACrB;IACA,OAAOc,KAAK,CAAC,8BAA8B,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,MAAM;IAC7B,CAAC,CAAC,CACCW,IAAI,CAAEb,QAAQ,IAAK;MAClBc,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEf,QAAQ,CAAC;IAClD,CAAC,CAAC,CACDsB,KAAK,CAAEC,KAAK,IAAK;MAChBT,OAAO,CAACS,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EACN,CAAC,CAAC,CACDD,KAAK,CAAEC,KAAK,IAAKT,OAAO,CAACC,GAAG,CAACQ,KAAK,CAAC,CAAC;AACzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}