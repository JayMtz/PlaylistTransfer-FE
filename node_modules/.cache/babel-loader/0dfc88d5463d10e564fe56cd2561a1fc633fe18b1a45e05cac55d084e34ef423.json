{"ast":null,"code":"import SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\nconst getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\nconst getLikedSongs = () => {\n  const token = getSpotifyTokenFromUrl();\n  spotifyApi.setAccessToken(token);\n  const getAllTracks = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const response = await spotifyApi.getMySavedTracks({\n      offset\n    });\n    const tracks = response.items.map(item => ({\n      name: item.track.name,\n      artist: item.track.artists[0].name\n    }));\n    if (response.next) {\n      // recursively get the next page of tracks\n      const nextTracks = await getAllTracks(offset + response.limit);\n      return [...tracks, ...nextTracks];\n    }\n    return tracks;\n  };\n  getAllTracks().then(tracks => {\n    console.log(tracks);\n    // do something with the songs\n  }).catch(error => console.log(error));\n};\nexport { spotifyApi, getSpotifyTokenFromUrl, getLikedSongs };","map":{"version":3,"names":["SpotifyWebApi","spotifyApi","getSpotifyTokenFromUrl","hash","window","location","token","substring","split","getLikedSongs","setAccessToken","getAllTracks","offset","arguments","length","undefined","response","getMySavedTracks","tracks","items","map","item","name","track","artist","artists","next","nextTracks","limit","then","console","log","catch","error"],"sources":["/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/spotifyApi.js"],"sourcesContent":["import SpotifyWebApi from 'spotify-web-api-js';\n\n\nconst spotifyApi = new SpotifyWebApi();\n\n\nconst getSpotifyTokenFromUrl = () =>{\n    const hash = window.location.hash;\n    const token = hash.substring(1).split('&')[0].split('=')[1];\n    return token\n  }\n\nconst getLikedSongs = () => {\n    const token = getSpotifyTokenFromUrl();\n    spotifyApi.setAccessToken(token);\n  \n    const getAllTracks = async (offset = 0) => {\n      const response = await spotifyApi.getMySavedTracks({ offset });\n      const tracks = response.items.map(item => ({\n        name: item.track.name,\n        artist: item.track.artists[0].name\n      }));\n  \n      if (response.next) {\n        // recursively get the next page of tracks\n        const nextTracks = await getAllTracks(offset + response.limit);\n        return [...tracks, ...nextTracks];\n      }\n  \n      return tracks;\n    };\n  \n    getAllTracks()\n      .then(tracks => {\n        console.log(tracks);\n        // do something with the songs\n      })\n      .catch(error => console.log(error));\n};\n\n\n\nexport { spotifyApi, getSpotifyTokenFromUrl, getLikedSongs };"],"mappings":"AAAA,OAAOA,aAAa,MAAM,oBAAoB;AAG9C,MAAMC,UAAU,GAAG,IAAID,aAAa,EAAE;AAGtC,MAAME,sBAAsB,GAAGA,CAAA,KAAK;EAChC,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACF,IAAI;EACjC,MAAMG,KAAK,GAAGH,IAAI,CAACI,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAOF,KAAK;AACd,CAAC;AAEH,MAAMG,aAAa,GAAGA,CAAA,KAAM;EACxB,MAAMH,KAAK,GAAGJ,sBAAsB,EAAE;EACtCD,UAAU,CAACS,cAAc,CAACJ,KAAK,CAAC;EAEhC,MAAMK,YAAY,GAAG,eAAAA,CAAA,EAAsB;IAAA,IAAfC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IACpC,MAAMG,QAAQ,GAAG,MAAMf,UAAU,CAACgB,gBAAgB,CAAC;MAAEL;IAAO,CAAC,CAAC;IAC9D,MAAMM,MAAM,GAAGF,QAAQ,CAACG,KAAK,CAACC,GAAG,CAACC,IAAI,KAAK;MACzCC,IAAI,EAAED,IAAI,CAACE,KAAK,CAACD,IAAI;MACrBE,MAAM,EAAEH,IAAI,CAACE,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAACH;IAChC,CAAC,CAAC,CAAC;IAEH,IAAIN,QAAQ,CAACU,IAAI,EAAE;MACjB;MACA,MAAMC,UAAU,GAAG,MAAMhB,YAAY,CAACC,MAAM,GAAGI,QAAQ,CAACY,KAAK,CAAC;MAC9D,OAAO,CAAC,GAAGV,MAAM,EAAE,GAAGS,UAAU,CAAC;IACnC;IAEA,OAAOT,MAAM;EACf,CAAC;EAEDP,YAAY,EAAE,CACXkB,IAAI,CAACX,MAAM,IAAI;IACdY,OAAO,CAACC,GAAG,CAACb,MAAM,CAAC;IACnB;EACF,CAAC,CAAC,CACDc,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC,CAAC;AACzC,CAAC;AAID,SAAShC,UAAU,EAAEC,sBAAsB,EAAEO,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}