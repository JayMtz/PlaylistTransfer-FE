{"ast":null,"code":"// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// function to handle Spotify authentication\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const scopes = ['user-library-read', 'playlist-modify-public', 'playlist-modify-private'];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${getSpotifyClientId()}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n};\n\n// function to get the Spotify client ID from the access token\nexport const getSpotifyClientId = () => {\n  const token = getSpotifyTokenFromUrl();\n  const decodedToken = decodeURIComponent(escape(atob(token.split('.')[1])));\n  const {\n    client_id\n  } = JSON.parse(decodedToken);\n  return client_id;\n};\n\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = async token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const userId = await getUserId(token);\n\n    // function to get all of the user's liked tracks\n    const getAllTracks = async function () {\n      let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      const response = await spotifyApi.getMySavedTracks({\n        offset\n      });\n      // map the response to an array of objects containing the track name, artist name, and user ID\n      const tracks = response.items.map(item => ({\n        name: item.track.name,\n        artist: item.track.artists[0].name,\n        userId: userId\n      }));\n\n      // check if there are more tracks to get\n      if (response.next) {\n        // recursively get the next page of tracks\n        const nextTracks = await getAllTracks(offset + response.limit);\n        // concatenate the current page of tracks with the next page of tracks\n        return [...tracks, ...nextTracks];\n      }\n      return tracks;\n    };\n\n    // get all of the user's liked tracks\n    const tracks = await getAllTracks();\n    console.log(tracks); // log the tracks to the console for debugging purposes\n\n    // send the tracks to the backend endpoint using fetch\n    const response = await fetch('http://localhost:4000/tracks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tracks)\n    });\n    console.log('Data sent successfully:', response);\n    const data = await response.json();\n    console.log('Data received:', data); // <-- Log the response data to the console\n\n    return data;\n  } catch (error) {\n    console.error('Error getting liked songs:', error);\n    throw error;\n  }\n};\n\n// function to create a new playlist\nexport const createPlaylist = async token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const {\n      id\n    } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n\n    // create the new playlist with the name \"testplaylist\" and set it to be private\n    const response = await spotifyApi.createPlaylist(id, {\n      name: 'Apple Music songs',\n      public: false\n    });\n    console.log('Playlist created:', response);\n  } catch (error) {\n    console.log('Error creating playlist:', error);\n  }\n};\nexport const getUserId = async token => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const {\n      id\n    } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n    return id;\n  } catch (error) {\n    console.log('Error getting user ID:', error);\n  }\n};","map":{"version":3,"names":["SpotifyWebApi","spotifyApi","handleSpotifyAuth","authEndpoint","scopes","redirectUri","authUrl","getSpotifyClientId","join","window","location","token","getSpotifyTokenFromUrl","decodedToken","decodeURIComponent","escape","atob","split","client_id","JSON","parse","hash","substring","getLikedSongs","setAccessToken","userId","getUserId","getAllTracks","offset","arguments","length","undefined","response","getMySavedTracks","tracks","items","map","item","name","track","artist","artists","next","nextTracks","limit","console","log","fetch","method","headers","body","stringify","data","json","error","createPlaylist","id","getMe","public"],"sources":["/Users/jay/Documents/GitHub/PlaylistTransfer-FE/src/spotifyApi.js"],"sourcesContent":["// create an instance of the SpotifyWebApi\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// function to handle Spotify authentication\n// function to handle Spotify authentication\nexport const handleSpotifyAuth = () => {\n  // set up the authentication endpoint, scopes, redirect URI, and URL to open for authentication\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const scopes = ['user-library-read', 'playlist-modify-public', 'playlist-modify-private'];\n  const redirectUri = 'http://localhost:3000/callback/';\n  const authUrl = `${authEndpoint}?client_id=${getSpotifyClientId()}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  // open the URL to authenticate the user\n  window.location = authUrl;\n}\n\n// function to get the Spotify client ID from the access token\nexport const getSpotifyClientId = () => {\n  const token = getSpotifyTokenFromUrl();\n  const decodedToken = decodeURIComponent(escape(atob(token.split('.')[1])));\n  const { client_id } = JSON.parse(decodedToken);\n  return client_id;\n};\n\n\n// function to get the Spotify access token from the URL\nexport const getSpotifyTokenFromUrl = () => {\n  const hash = window.location.hash;\n  const token = hash.substring(1).split('&')[0].split('=')[1];\n  return token;\n};\n\n// function to get the user's liked songs from Spotify\nexport const getLikedSongs = async (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n\n  try {\n    // get the user ID\n    const userId = await getUserId(token);\n\n    // function to get all of the user's liked tracks\n    const getAllTracks = async (offset = 0) => {\n      const response = await spotifyApi.getMySavedTracks({ offset });\n      // map the response to an array of objects containing the track name, artist name, and user ID\n      const tracks = response.items.map((item) => ({\n        name: item.track.name,\n        artist: item.track.artists[0].name,\n        userId: userId,\n      }));\n\n      // check if there are more tracks to get\n      if (response.next) {\n        // recursively get the next page of tracks\n        const nextTracks = await getAllTracks(offset + response.limit);\n        // concatenate the current page of tracks with the next page of tracks\n        return [...tracks, ...nextTracks];\n      }\n\n      return tracks;\n    };\n\n    // get all of the user's liked tracks\n    const tracks = await getAllTracks();\n\n    console.log(tracks); // log the tracks to the console for debugging purposes\n\n    // send the tracks to the backend endpoint using fetch\n    const response = await fetch('http://localhost:4000/tracks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(tracks),\n    });\n\n    console.log('Data sent successfully:', response);\n\n    const data = await response.json();\n    console.log('Data received:', data); // <-- Log the response data to the console\n\n    return data;\n  } catch (error) {\n    console.error('Error getting liked songs:', error);\n    throw error;\n  }\n};\n\n\n\n\n// function to create a new playlist\nexport const createPlaylist = async (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const { id } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n    \n    // create the new playlist with the name \"testplaylist\" and set it to be private\n    const response = await spotifyApi.createPlaylist(id, {\n      name: 'Apple Music songs',\n      public: false\n    });\n    console.log('Playlist created:', response);\n  } catch (error) {\n    console.log('Error creating playlist:', error);\n  }\n};\n\n\nexport const getUserId = async (token) => {\n  // set the access token for the SpotifyWebApi instance\n  spotifyApi.setAccessToken(token);\n  try {\n    // get the user ID\n    const { id } = await spotifyApi.getMe();\n    console.log('User ID:', id);\n    return id;\n  } catch (error) {\n    console.log('Error getting user ID:', error);\n  }\n};\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}